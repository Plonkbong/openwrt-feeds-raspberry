#
# Copyright (C) 2018 OpenWrt.org
#
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
#

include $(TOPDIR)/rules.mk
include $(INCLUDE_DIR)/kernel.mk

PKG_NAME:=v4l2loopback
PKG_VERSION:=v0.11.0
PKG_RELEASE:=1

PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
PKG_SOURCE_URL:=https://github.com/umlaeute/v4l2loopback.git
PKG_SOURCE_PROTO:=git
PKG_SOURCE_SUBDIR=$(PKG_NAME)-$(PKG_VERSION)
PKG_SOURCE_VERSION:=05a03e2b624be632bce4f2260a7211f396bbdff3

PKG_MAINTAINER:=Plonkbong <plonkbong100@protonmail.com>
PKG_LICENSE=GPL-2.0
PKG_LICENSE_FILES=COPYING


#KERNELSRC_URL=https://cdn.kernel.org/pub/linux/kernel/v4.x/
#KERNELSRC_FILE=linux-$(LINUX_VERSION).tar.xz
#KERNELSRC_DRV_DIR=$(LINUX_DIR)/drivers/media/usb/usbtv

include $(INCLUDE_DIR)/package.mk

define KernelPackage/v4l2loopback
  SUBMENU:=Video Support
  TITLE:=v4l2loopback a kernel module to create V4L2 loopback devices
  DEPENDS:=+kmod-video-core +kmod-video-videobuf2 +kmod-sound-core
  FILES:=$(PKG_BUILD_DIR)/v4l2loopback.ko
  AUTOLOAD:=$(call AutoProbe,v4l2loopback)
  # PKGFLAGS should normaly at PKGFLAGS:=nonshared or better disable by # because it is the default
  PKGFLAGS:=shared
endef

define KernelPackage/v4l2loopback/description
  this module allows you to create "virtual video devices" normal (v4l2) applications will read these devices as if they were ordinary video devices, but the video will not be read from e.g. a capture card but instead it is generated by another application. this allows you for instance to apply apply some nifty video effects on your Skype video... it also allows some more serious things (e.g. I've been using it to add streaming capabilities to an application by the means of hooking GStreamer into the loopback devices).
endef

# this ?
#EXTRA_KCONFIG:= \
	CONFIG_MEDIA_USB_SUPPORT=y \
	CONFIG_MEDIA_CAMERA_SUPPORT=y \
	CONFIG_VIDEO_USBTV=m
# or this ?
	
#EXTRA_KCONFIG:= \
#	CONFIG_VIDEO_USBTV=m
	
# better

EXTRA_CFLAGS:= \
	$(patsubst CONFIG_%, -DCONFIG_%=1, $(patsubst %=m,%,$(filter %=m,$(EXTRA_KCONFIG)))) \
	$(patsubst CONFIG_%, -DCONFIG_%=1, $(patsubst %=y,%,$(filter %=y,$(EXTRA_KCONFIG)))) \

MAKE_OPTS:= \
	$(KERNEL_MAKE_FLAGS) \
	EXTRA_CFLAGS="$(EXTRA_CFLAGS)" \
	$(EXTRA_KCONFIG) \
	M="$(PKG_BUILD_DIR)"
	
	#SUBDIRS="$(KERNELSRC_DRV_DIR)" \
	
#MAKE_OPTS:= \
#	ARCH="$(LINUX_KARCH)" \
#	CROSS_COMPILE="$(TARGET_CROSS)" \
#	M="$(PKG_BUILD_DIR)"
	
#define Download/kernelsource
#	URL:=$(KERNELSRC_URL)
#	FILE:=$(KERNELSRC_FILE)
#	#HASH:= # from where did i know ?
#endef
	


define Build/Compile
	# what is the best ?
	## $(KERNEL_MAKE) SUBDIRS="$(PKG_BUILD_DIR)" modules
	
	$(MAKE) -C "$(LINUX_DIR)" \
		$(MAKE_OPTS) \
		modules
		
	##$(MAKE_KMOD) -C "$(LINUX_DIR)" \
	##	SUBDIRS="$(PKG_BUILD_DIR)/glue" \
	##	modules
endef

$(eval $(call KernelPackage,v4l2loopback))
